buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods-${mc_version}"

repositories {
    mavenLocal()
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven {
        name "JEI"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'CC: Tweaked'
        url 'https://squiddev.cc/maven/'
    }
    maven {
        name "The One Probe"
        url "http://maven.tterrag.com/"
    }
    maven {
        name 'Crafttweaker/Patchouli/Botania/Immersive Engineering'
        url 'http://maven.blamejared.com/'
    }
    maven {
        name 'Curios'
        url "https://maven.theillusivec4.top/"
    }
    maven {
        name 'Gigaherz mappings'
        url 'https://dogforce-games.com/maven/'
    }
    maven {
        name "K-4u Mod maven"
        url "https://modmaven.dev/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
ext.configFile = file('gradle.properties')
ext.config = parseConfig(configFile)

version = "${mc_version}-${mod_version_massive}.${mod_version_major}.${mod_version_minor}"
group = "me.desht.pneumaticcraft"
archivesBaseName = "pneumaticcraft-repressurized"

if (System.getenv().BUILD_NUMBER != null) {
    version += "-${System.getenv().BUILD_NUMBER}"
} else {
    version += "-CUSTOM"
}

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

// prevent java 8's strict doclint for javadocs from failing builds
allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

jar {
    manifest {
        attributes([
            'FMLAT': 'accesstransformer.cfg',
            "Specification-Title": "${config.mod_id}",
            "Specification-Vendor": "desht",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${config.mod_id}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"desht",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task apiJar(type: Jar) {
    classifier = 'api'
    from(sourceSets.main.output) {
        include "me/desht/pneumaticcraft/api/**"
    }
}

task("uploadJars", dependsOn:"reobf") {
    description = "uploads JARs"
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                }
            }
        }
    }
}

artifacts {
    archives sourcesJar
    archives apiJar
}

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            // recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            property 'fml.earlyprogresswindow', 'false'
            // recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

//            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            ideaModule "${project.name}.main"
            workingDirectory project.file('run').canonicalPath
            mods {
                pneumaticcraft {
                    source sourceSets.main
                }
            }
        }
        server {
            property 'forge.logging.markers', 'CONFIG'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            workingDirectory project.file('run').canonicalPath
            mods {
                pneumaticcraft {
                    source sourceSets.main
                }
            }
        }
        data {
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            workingDirectory project.file('run')
            forceExit false
            mods {
                pneumaticcraft {
                    source sourceSets.main
                }
            }
            args '--mod', 'pneumaticcraft', '--all', '--output', file('src/generated/resources/'),
                    '--existing', sourceSets.main.resources.srcDirs[0]
            environment 'target', 'fmluserdevdata'
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    compileOnly fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
    runtimeOnly fg.deobf ("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    compileOnly fg.deobf("org.squiddev:cc-tweaked-1.16.4:${cc_tweaked_version}")
    runtimeOnly fg.deobf("org.squiddev:cc-tweaked-1.16.4:${cc_tweaked_version}")
    compileOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")
    runtimeOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")
    compileOnly fg.deobf("curse.maven:mekanism-268560:${mekanism_curse_id}")
    runtimeOnly fg.deobf("curse.maven:mekanism-268560:${mekanism_curse_id}")
    compileOnly fg.deobf("curse.maven:hwyla-253449:${hwyla_curse_id}")
    runtimeOnly fg.deobf("curse.maven:hwyla-253449:${hwyla_curse_id}")
    compileOnly fg.deobf("curse.maven:cofh_core-69162:${cofh_core_curse_id}")
    runtimeOnly fg.deobf("curse.maven:cofh_core-69162:${cofh_core_curse_id}")
    compileOnly fg.deobf("appeng:appliedenergistics2:${ae2_version}:api")
    runtimeOnly fg.deobf("appeng:appliedenergistics2:${ae2_version}")

    // Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
    }

//    runtimeOnly fg.deobf("curse.maven:modernui:3158102")
//    compileOnly "li.cil.oc:OpenComputers:MC1.12.2-${oc_version}:api"
//    compileOnly "CraftTweaker2:CraftTweaker2-API:${crafttweaker_version}"
//    compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-1.14.4:${crafttweaker_version}")
//    compileOnly "net.industrial-craft:industrialcraft-2:2.8.27-ex112:api"
//    compileOnly "thaumcraft:Thaumcraft:${thaumcraft_version}"
//    compileOnly "team.chisel.ctm:CTM:${ctm_version}:api"
//    compileOnly "com.github.glitchfiend.biomesoplenty:ToughAsNails:${tan_version}:universal"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }

    // copy everything else, thats not the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

//idea { module { inheritOutputDirs = true } }

